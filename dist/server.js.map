{"version":3,"sources":["../server/server.js"],"names":["require","config","mongoose","port","process","env","PORT","SourceMapSupport","install","connect","DBPASSWORD","useNewUrlParser","useUnifiedTopology","then","server","app","listen","console","log","setTimeout","catch","error","use","express","static","bodyParser","json","urlencoded","extended","name","keys","passport","initialize","session","isLoggedIn","req","res","next","status","message","isAuthorized","houseHold","owner","user","_id","post","User","findById","household","APIKEY","method","headers","accessToken","body","JSON","stringify","houseName","response","ok","queryFilter","googleID","findOne","HouseHold","create","calendarID","id","members","newHousehold","updateOne","send","err","get","house","eventBody","messageBody","Message","newMessage","transporter","nodemailer","createTransport","service","auth","MAILUSER","pass","MAILPASS","mailOptions","from","to","subject","text","firstName","lastName","html","sendMail","data","resObject","filter","find","messages","params","houseID","delete","deleteOne","deleteMany","authenticate","scope","logout","redirect","successRedirect","failureRedirect","sendFile","path","resolve"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { ObjectId, ObjectID } from 'mongodb';\nimport SourceMapSupport from 'source-map-support';\nimport passport from 'passport';\nimport cookieSession from 'cookie-session'\nimport path from 'path';\nimport User from '../models/User';\nimport HouseHold from '../models/Household';\nimport Message from '../models/Message';\nimport 'babel-polyfill';\nimport fetch from 'node-fetch';\nimport nodemailer from 'nodemailer';\nrequire('dotenv').config();\nrequire('../passport-setup')\nconst mongoose = require('mongoose');\n\nlet port = process.env.PORT || 3000;\n//app.set('port', (process.env.PORT || 5000));\nSourceMapSupport.install();\n//INITIALIZE DB\nmongoose.connect(`mongodb+srv://JonathanA:${process.env.DBPASSWORD}@roommatecluster.wjtg8.mongodb.net/Roommates?retryWrites=true&w=majority`,{ useNewUrlParser: true, useUnifiedTopology: true })\n.then(connection => \n    {\n        let server = app.listen(port, () => \n        {\n            console.log(`app started on port ${port}`)\n            console.log('Database connected successfully');\n        });\n\n        server.setTimeout(120000);\n    })\n.catch(error => \n    {\n        console.log('ERROR when connecting:', error);\n    });\nconst app = express();\n//MIDDLEWARE\n\napp.use(express.static('static'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended:false}));\napp.use(cookieSession({\n    name:'Roomies-sesion',\n    keys:['key1','key2']\n}));\napp.use(passport.initialize());\napp.use(passport.session());\n\n\n//ROUTES\nconst isLoggedIn = (req,res,next) =>\n{\n    if(req.session.passport)\n    {\n        next();\n    }\n    else\n    {\n        res.status(401).json({message: 'Route only accessible to logged in users'})\n    }\n}\n\nconst isAuthorized = (houseHold) => \n{\n    if(houseHold.owner === req.session.passport.user.user._id)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\napp.post('/api/v1/households', isLoggedIn, (req,res) => \n{\n    User.findById(req.session.passport.user.user._id).then(user => \n    {\n        if(user.household)\n        {\n            res.status(500).json({message: 'Users are only allowed to be a part of one household at a time'})\n        }\n\n        else\n        {\n            fetch(`https://www.googleapis.com/calendar/v3/calendars?key=${process.env.APIKEY}`, {\n                method:'POST',\n                headers:{'Authorization':`Bearer ${req.session.passport.user.accessToken}`, 'Accept':'application/json','Content-Type':'application/json'},\n                body:JSON.stringify({'summary':req.body.houseName}),\n            })                                                \n            .then(response => \n            {\n                if(response.ok)\n                {\n                    response.json().then(message => \n                    {\n                        const queryFilter = {googleID: req.session.passport.user.user.googleID};\n                        User.findOne(queryFilter).then(user => \n                        {\n                            HouseHold.create({\n                                houseName: JSON.stringify(req.body.houseName),\n                                calendarID: message.id,\n                                owner: user._id,\n                                members: [user,]\n                            })\n                            .then(newHousehold => \n                            {\n                                req.session.passport.user.user.household = newHousehold._id;\n                                User.updateOne(queryFilter, {household:newHousehold._id}).then(update =>\n                                {\n                                    res.status(200).json({ message: newHousehold })\n                                })\n \n                            })\n                        })\n                    }) \n                }\n                else\n                {\n                    res.status(500).send({message: 'Error when creating calendar'});\n                }\n            })\n            .catch(err => \n            {\n                res.status(500).send(err) \n            })\n        }\n    });\n});\n\napp.get('/api/v1/households/public', isLoggedIn, (req,res) => \n{\n    HouseHold.findById(req.session.passport.user.user.household).then(house =>\n    {\n        fetch(`https://www.googleapis.com/calendar/v3/calendars/${house.calendarID}/acl?key=${process.env.APIKEY}`,  \n        {\n            method:'POST',\n            headers:{'Authorization':`Bearer ${req.session.passport.user.accessToken}`, 'Accept':'application/json','Content-Type':'application/json'},\n            body:JSON.stringify({\"role\":\"reader\",\"scope\":{\"type\":\"default\"}}),\n        })\n        .then(response => \n        {\n            if(response.ok)\n            {\n                res.status(200).json({message: 'Success'});\n            }  \n            else\n            {\n                res.status(500).json({message: 'Problem making calendar public'});\n            }\n        })\n        .catch(err => \n        {\n            res.status(500).json({message: err})\n        })\n    })\n})\n\napp.post('/api/v1/events', isLoggedIn, (req,res) => \n{\n    HouseHold.findById(req.session.passport.user.user.household).then(house => \n    {\n        fetch(`https://www.googleapis.com/calendar/v3/calendars/${house.calendarID}/events?key=${process.env.APIKEY}`, {\n            method:'POST',\n            headers:{'Authorization':`Bearer ${req.session.passport.user.accessToken}`, 'Accept':'application/json','Content-Type':'application/json'},\n            body:JSON.stringify(req.body.eventBody),\n        })\n        .then(response => \n        {\n            if(response.ok)\n            {\n                response.json().then(message => \n                {\n                    res.status(200).json({'message':message});\n                })\n                \n            }\n            else\n            {\n                res.status(501).json({message:'problem creating google calendar event'});\n            }\n        })\n        .catch(err => \n        {\n            res.status(500).json({message: err});\n        })\n    })\n})\n\napp.post('/api/v1/messages', isLoggedIn, (req,res) => \n{\n    const message = req.body.messageBody;\n    message.household = req.session.passport.user.user.household;\n    Message.create(\n        message\n    )\n    .then(newMessage => \n    {\n        res.status(200).json({ message: newMessage });\n    })\n    .catch(err => \n    {\n        res.status(500).json({ message: err });\n    })\n})\n\napp.post('/api/v1/invite/', isLoggedIn, (req,res) => \n{\n    if(req.session.passport.user.user.household)\n    {\n        let transporter = nodemailer.createTransport({\n            service:'gmail',\n            auth: { user: process.env.MAILUSER, pass: process.env.MAILPASS},\n        })\n\n        let mailOptions = {\n            from: process.env.MAILUSER,\n            to: 'jonathanaguayoalpha@gmail.com',\n            subject: 'Invitation to Room8tes household!',\n            text: `Hi, ${req.session.passport.user.user.firstName} ${req.session.passport.user.user.lastName} is inviting to their house. Click here to join`,\n            html: '<p> <a href=\"http://localhost:8000/home\"> Hello </a> </p>'\n        }\n\n        transporter.sendMail(mailOptions, (err, data) => \n        {\n            if(err)\n            {\n                res.status(500).json({message: err})\n            }\n            else\n            {\n                res.status(200).json({message: 'Email sent successfully'})\n            }\n        })\n    }\n    else\n    {\n        res.status(501).json({message: 'You must create a household before you can invite someone'})\n    }\n\n});\n\napp.get('/api/v1/user/', isLoggedIn, (req,res) => \n{\n    let resObject = {};\n    User.findById(req.session.passport.user.user._id)\n    .then(user => \n    {\n        resObject.user=user;\n        if(user.household && !user==null)\n        {\n            HouseHold.findById(user.household)\n            .then(house => \n            {\n                resObject.household = house;\n                res.status(200).json({message: resObject});\n            })\n        }\n        else\n        {\n            resObject.household = null;\n            res.status(200).json({message: resObject});\n        }\n        \n    })\n})\n\napp.get('/api/v1/messages', isLoggedIn, (req,res) => \n{\n    if(req.session.passport.user.user.household)\n    {\n        const filter = {household: req.session.passport.user.user.household}\n        Message.find(filter).then(messages => \n        {\n            res.status(200).json({message: messages})\n        })\n        .catch(err => \n        {\n            res.status(500).json({message: err})\n        })\n    }\n    else\n    {\n        res.status(400).json({message: 'You must join a house to see household messages'})\n    }\n})\n\napp.get('/api/v1/houseHolds/:houseID', (req,res) => \n{\n    HouseHold.findById(req.params.houseID).then(houseHold => \n        {\n            res.status(200).json(houseHold);\n        })\n        .catch(err => \n        {\n            res.status(501).json({'message': err})\n        })\n})\n\napp.get('/api/v1/houseHolds/', isLoggedIn, (req,res) => \n{\n    User.findById(req.session.passport.user.user._id).then(user => \n    {\n        HouseHold.findById(user.household).then(house => \n        {\n            res.status(200).json({message: house});\n        })\n    })\n    .catch(err => \n    {\n        res.status(500).json({message: err})\n    })\n})\n\napp.delete('/api/v1/houseHolds/:houseID',isLoggedIn,(req,res) => \n{\n    console.log(req.params.houseID);\n    HouseHold.findById(req.params.houseID).then(houseHold => \n    {\n        if(houseHold.owner == req.session.passport.user.user._id)\n        {\n            HouseHold.deleteOne({_id: houseHold._id}).then( () => \n            {\n                User.updateOne({_id:req.session.passport.user.user._id}, {household: null}).then(update =>\n                {\n                    req.session.passport.user.user.household = null;\n                    Message.deleteMany({ household: req.params.houseID }).then(deleted=>\n                    {\n                        res.status(200).json({message: req.session.passport.user.user})\n                    })\n                })\n            });\n        }\n        else\n        {\n            res.status(401).json({message: 'Only owner of the house may delete the household'});\n        }\n        \n    })\n    .catch(err => \n        {\n            console.log(err);\n            res.status(500).json({message: err})\n        })\n})\n\n//GOOGLE OAUTH2.0 ROUTES\napp.get('/auth/google/', passport.authenticate('google', { scope:[ 'profile','email','https://www.googleapis.com/auth/calendar',] }\n));\n\napp.get('/auth/google/test', passport.authenticate('google',{ scope:[ 'profile','email'] }), (req,res) => \n{\n    res.send('hello jonathan');\n})\napp.get('/api/v1/logout', (req,res) =>\n{\n    req.session = null;\n    req.logout();\n    res.redirect('/');\n});\napp.get('/auth/google/failure',(req,res) => {res.send('Unable to login')});\napp.get( '/auth/google/callback/', \n    passport.authenticate( 'google', {\n    successRedirect: `/auth/google/success`,\n    failureRedirect: '/auth/google/failure'\n    })\n);\n\napp.get('/auth/google/success',(req,res) => \n{\n    res.send(req.session.passport);\n})\napp.get('/auth/google/success/:house',(req,res) => \n{\n    res.send(req.params.house);\n})\n\n//Static page route\napp.get('*', isLoggedIn,(req,res) =>\n{\n    res.sendFile(path.resolve('static/index.html'));\n});\n\n"]}